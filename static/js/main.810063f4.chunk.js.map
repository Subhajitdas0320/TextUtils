{"version":3,"sources":["components/Navbar.js","components/TextForm.js","components/Alert.js","App.js","reportWebVitals.js","index.js"],"names":["Navbar","props","React","createElement","className","concat","mode","href","title","type","data-bs-toggle","data-bs-target","aria-controls","aria-expanded","aria-label","id","aria-current","onClick","toggleMode","role","aria-checked","htmlFor","TextForm","_useState","useState","_useState2","_slicedToArray","text","setText","Fragment","style","color","heading","value","onChange","event","target","backgroundColor","rows","disabled","length","newText","toUpperCase","showAlert","toLowerCase","navigator","clipboard","writeText","split","join","filter","element","Alert","height","alert","word","lower","charAt","slice","capitalize","msg","defaultProps","aboutText","App","setMode","_useState3","_useState4","setAlert","message","setTimeout","cls","document","body","reportWebVitals","onPerfEntry","Function","__webpack_require__","e","then","bind","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","getElementById","render","StrictMode"],"mappings":"mMAIe,SAASA,EAAOC,GAC7B,OACEC,IAAAC,cAAA,OACEC,UAAS,kCAAAC,OAAoCJ,EAAMK,KAAI,QAAAD,OAAOJ,EAAMK,OAEpEJ,IAAAC,cAAA,OAAKC,UAAU,mBACbF,IAAAC,cAAA,KAAGC,UAAU,eAAeG,KAAK,KAC9BN,EAAMO,OAETN,IAAAC,cAAA,UACEC,UAAU,iBACVK,KAAK,SACLC,iBAAe,WACfC,iBAAe,0BACfC,gBAAc,yBACdC,gBAAc,QACdC,aAAW,qBAEXZ,IAAAC,cAAA,QAAMC,UAAU,yBAElBF,IAAAC,cAAA,OAAKC,UAAU,2BAA2BW,GAAG,0BAC3Cb,IAAAC,cAAA,MAAIC,UAAU,mCACZF,IAAAC,cAAA,MAAIC,UAAU,YACZF,IAAAC,cAAA,KAAGC,UAAU,WAAWY,eAAa,OAAOT,KAAK,KAAI,UAgBzDL,IAAAC,cAAA,OAAKC,UAAS,+BAAAC,OAAgD,UAAfJ,EAAMK,KAAmB,OAAS,UAC/EJ,IAAAC,cAAA,SACEC,UAAU,mBACVa,QAAW,WAAKhB,EAAMiB,WAAW,OACjCT,KAAK,WACLU,KAAK,SACLC,eAAa,QACbL,GAAG,2BAELb,IAAAC,cAAA,SAAOC,UAAU,mBAAmBiB,QAAQ,0BAAyB,mBClDlE,SAASC,EAASrB,GAC7B,IA4BCsB,EACuBC,mBAAS,IAAGC,EAAAC,YAAAH,EAAA,GAA7BI,EAAIF,EAAA,GAAEG,EAAOH,EAAA,GAEtB,OACEvB,IAAAC,cAAAD,IAAA2B,SAAA,KACA3B,IAAAC,cAAA,OAAKC,UAAU,YAAY0B,MAAS,CAACC,MAAuB,SAAf9B,EAAMK,KAAkB,QAAU,YAC5EJ,IAAAC,cAAA,MAAIC,UAAU,QAAQH,EAAM+B,SAC7B9B,IAAAC,cAAA,OAAKC,UAAU,QACbF,IAAAC,cAAA,YAAUC,UAAU,eAAe6B,MAASN,EAC5CO,SAzBmB,SAACC,GAEpBP,EAAQO,EAAMC,OAAOH,QAuBKH,MAAS,CAACO,gBAAiC,SAAfpC,EAAMK,KAAkB,UAAY,QAASyB,MAAuB,SAAf9B,EAAMK,KAAkB,QAAU,WAAYS,GAAG,QAAQuB,KAAK,OAE3KpC,IAAAC,cAAA,UAAQoC,SAA4B,IAAhBZ,EAAKa,OAAcpC,UAAW,4BAA4Ba,QAvC1D,WAElB,IAAIwB,EAAUd,EAAKe,cACnBd,EAAQa,GACRxC,EAAM0C,UAAU,yBAA0B,aAmC0D,wBACtGzC,IAAAC,cAAA,UAAQoC,SAA4B,IAAhBZ,EAAKa,OAAcpC,UAAW,4BAA4Ba,QAlCxD,WAEpB,IAAIwB,EAAUd,EAAKiB,cACnBhB,EAAQa,GACRxC,EAAM0C,UAAU,yBAA0B,aA8B4D,wBACxGzC,IAAAC,cAAA,UAAQoC,SAA4B,IAAhBZ,EAAKa,OAAcpC,UAAW,4BAA4Ba,QAzB1D,WACpBW,EAAQ,IACR3B,EAAM0C,UAAU,eAAgB,aAuBsE,SACtGzC,IAAAC,cAAA,UAAQoC,SAA4B,IAAhBZ,EAAKa,OAAcpC,UAAW,4BAA4Ba,QAtB/D,WACf4B,UAAUC,UAAUC,UAAUpB,GAC9B1B,EAAM0C,UAAU,sBAAuB,aAoB0D,QACjGzC,IAAAC,cAAA,UAAQoC,SAA4B,IAAhBZ,EAAKa,OAAcpC,UAAW,4BAA4Ba,QAnBtD,WACxB,IAAIwB,EAAUd,EAAKqB,MAAM,QACzBpB,EAAQa,EAAQQ,KAAK,MACrBhD,EAAM0C,UAAU,uBAAwB,aAgBkE,wBAE5GzC,IAAAC,cAAA,OAAKC,UAAU,iBAAiB0B,MAAS,CAACC,MAAuB,SAAf9B,EAAMK,KAAkB,QAAU,YAChFJ,IAAAC,cAAA,UAAI,qBACJD,IAAAC,cAAA,SAAIwB,EAAKqB,MAAM,SAASE,OAAO,SAACC,GAAW,OAA0B,IAAnBA,EAAQX,SAAeA,OAAO,WAASb,EAAKa,OAAO,eACrGtC,IAAAC,cAAA,SAAI,KAAQwB,EAAKqB,MAAM,SAASE,OAAO,SAACC,GAAW,OAA0B,IAAnBA,EAAQX,SAAeA,OAAO,iBACxFtC,IAAAC,cAAA,UAAI,WACJD,IAAAC,cAAA,SAAIwB,EAAKa,OAAS,EAAIb,EAAO,yBCnDtB,SAASyB,EAAMnD,GAK5B,OACEC,IAAAC,cAAA,OAAK2B,MAAS,CAACuB,OAAS,SACrBpD,EAAMqD,OAASpD,IAAAC,cAAA,WACfD,IAAAC,cAAA,OACHC,UAAS,eAAAC,OAAiBJ,EAAMqD,MAAM7C,KAAI,gCACtCU,KAAK,SAELjB,IAAAC,cAAA,cAXe,SAACoD,GAChB,IAAMC,EAAQD,EAAKX,cACnB,OAAOY,EAAMC,OAAO,GAAGf,cAAgBc,EAAME,MAAM,GAS1CC,CAAW1D,EAAMqD,MAAM7C,OAAe,MAAIR,EAAMqD,MAAMM,OFqDvE5D,EAAO6D,aAAe,CACpBrD,MAAO,iBACPsD,UAAW,SGFEC,MA3Df,WAAe,IAAAxC,EACWC,mBAAS,SAAQC,EAAAC,YAAAH,EAAA,GAAlCjB,EAAImB,EAAA,GAAEuC,EAAOvC,EAAA,GAAAwC,EACMzC,mBAAS,MAAK0C,EAAAxC,YAAAuC,EAAA,GAAjCX,EAAKY,EAAA,GAAEC,EAAQD,EAAA,GAEhBvB,EAAY,SAACyB,EAAS3D,GAC1B0D,EAAS,CACPP,IAAKQ,EACL3D,KAAMA,IAER4D,WAAW,WACTF,EAAS,OACR,OAuBL,OACEjE,IAAAC,cAAAD,IAAA2B,SAAA,KAEI3B,IAAAC,cAACH,EAAM,CAACQ,MAAM,YAAYF,KAAMA,EAAMY,WAhBzB,SAACoD,GAGL,UAAThE,GACF0D,EAAQ,QACRO,SAASC,KAAK1C,MAAMO,gBAAkB,UACtCM,EAAU,6BAA8B,aAExCqB,EAAQ,SACRO,SAASC,KAAK1C,MAAMO,gBAAkB,QACtCM,EAAU,8BAA+B,eAOvCzC,IAAAC,cAACiD,EAAK,CAACE,MAAOA,IACdpD,IAAAC,cAAA,OAAKC,UAAU,kBAOPF,IAAAC,cAACmB,EAAQ,CACPU,QAAQ,uEACRW,UAAWA,EAAWrC,KAAQA,OC5CjCmE,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxCC,EAAAC,EAAA,GAAAC,KAAAF,EAAAG,KAAA,UAAqBD,KAAK,SAAAE,GAAiD,IAA9CC,EAAMD,EAANC,OAAQC,EAAMF,EAANE,OAAQC,EAAMH,EAANG,OAAQC,EAAMJ,EAANI,OAAQC,EAAOL,EAAPK,QAC3DJ,EAAOP,GACPQ,EAAOR,GACPS,EAAOT,GACPU,EAAOV,GACPW,EAAQX,MCDDY,IAASC,WAAWhB,SAASiB,eAAe,SACpDC,OACHvF,IAAAC,cAACD,IAAMwF,WAAU,KACfxF,IAAAC,cAAC4D,EAAG,QAORU","file":"static/js/main.810063f4.chunk.js","sourcesContent":["import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n//import {Link} from \"react-router-dom\"\r\n\r\nexport default function Navbar(props) {\r\n  return (\r\n    <nav\r\n      className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}\r\n    >\r\n      <div className=\"container-fluid\">\r\n        <a className=\"navbar-brand\" href=\"#\">\r\n          {props.title}\r\n        </a>\r\n        <button\r\n          className=\"navbar-toggler\"\r\n          type=\"button\"\r\n          data-bs-toggle=\"collapse\"\r\n          data-bs-target=\"#navbarSupportedContent\"\r\n          aria-controls=\"navbarSupportedContent\"\r\n          aria-expanded=\"false\"\r\n          aria-label=\"Toggle navigation\"\r\n        >\r\n          <span className=\"navbar-toggler-icon\"></span>\r\n        </button>\r\n        <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n          <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n            <li className=\"nav-item\">\r\n              <a className=\"nav-link\" aria-current=\"page\" href=\"#\">\r\n                Home\r\n              </a>\r\n            </li>\r\n            {/* <li className=\"nav-item\">\r\n              <Link className=\"nav-link\" to=\"/about\">\r\n                {props.aboutText}\r\n              </Link>\r\n            </li> */}\r\n          </ul>\r\n          {/* <div className=\"d-flex\">\r\n            <div className=\"bg-primary rounded mx-2\" onClick = {()=>{props.toggleMode('primary')}} style = {{height: \"30px\", width: \"30px\", cursor: \"pointer\"}}></div>\r\n            <div className=\"bg-danger rounded mx-2\" onClick = {()=>{props.toggleMode('danger')}} style = {{height: \"30px\", width: \"30px\", cursor: \"pointer\"}}></div>\r\n            <div className=\"bg-success rounded mx-2\" onClick = {()=>{props.toggleMode('success')}} style = {{height: \"30px\", width: \"30px\", cursor: \"pointer\"}}></div>\r\n            <div className=\"bg-warning rounded mx-2\" onClick = {()=>{props.toggleMode('warning')}} style = {{height: \"30px\", width: \"30px\", cursor: \"pointer\"}}></div>\r\n          </div> */}\r\n          <div className={`form-check form-switch text-${props.mode === \"light\" ? \"dark\" : \"light\"}`}>\r\n            <input\r\n              className=\"form-check-input\"\r\n              onClick = {()=>{props.toggleMode(null)}}\r\n              type=\"checkbox\"\r\n              role=\"switch\"\r\n              aria-checked=\"false\" \r\n              id=\"flexSwitchCheckDefault\"\r\n            />\r\n            <label className=\"form-check-label\" htmlFor=\"flexSwitchCheckDefault\">\r\n              Toggle Mode\r\n            </label>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </nav>\r\n  );\r\n}\r\n\r\nNavbar.propTypes = {\r\n  title: PropTypes.string.isRequired,\r\n  aboutText: PropTypes.string.isRequired,\r\n}; //isRequired is used to compulsarily set the prop or else it will give a error\r\n\r\nNavbar.defaultProps = {\r\n  title: \"Set title here\",\r\n  aboutText: \"About\",\r\n};\r\n","import React, {useState} from \"react\";\r\n\r\nexport default function TextForm(props) {\r\n    const handleUpClick = ()=>{\r\n        /* console.log(\"Uppercase was clicked\" + text); */\r\n        let newText = text.toUpperCase();\r\n        setText(newText);\r\n        props.showAlert(\"Converted to uppercase\", \"success\");\r\n    }\r\n    const handleDownClick = ()=>{\r\n        /* console.log(\"Uppercase was clicked\" + text); */\r\n        let newText = text.toLowerCase();\r\n        setText(newText);\r\n        props.showAlert(\"Converted to lowercase\", \"success\");\r\n    }\r\n    const handleOnChange = (event)=>{\r\n        /* console.log(\"On change\"); */\r\n        setText(event.target.value);\r\n    }\r\n    const handleOnClear = ()=>{\r\n      setText(\"\");\r\n      props.showAlert(\"Text cleared\", \"success\");\r\n    }\r\n    const copyText = ()=>{\r\n      navigator.clipboard.writeText(text)\r\n      props.showAlert(\"Copied to clipboard\", \"success\");\r\n    }\r\n    const handleExtraSpaces = ()=>{\r\n      let newText = text.split(/[ ]+/);\r\n      setText(newText.join(\" \"));\r\n      props.showAlert(\"Extra spaces removed\", \"success\");\r\n    }\r\n    const [text, setText] = useState('');\r\n    //setText(\"NewText\"); //To change the text\r\n  return (\r\n    <>\r\n    <div className=\"container\" style = {{color : props.mode === \"dark\" ? \"white\" : \"#062655\"}}>\r\n       <h1 className=\"mb-4\">{props.heading}</h1> \r\n      <div className=\"mb-3\">\r\n        <textarea className=\"form-control\" value = {text}\r\n        onChange={handleOnChange} style = {{backgroundColor : props.mode === \"dark\" ? \"#13466e\" : \"white\", color : props.mode === \"dark\" ? \"white\" : \"#062655\"}} id=\"myBox\" rows=\"8\"></textarea>\r\n      </div>\r\n      <button disabled = {text.length === 0} className= \"btn btn-primary mx-2 my-1\" onClick={handleUpClick}>Convert to Uppercase</button>\r\n      <button disabled = {text.length === 0} className= \"btn btn-primary mx-1 my-1\" onClick={handleDownClick}>Convert to Lowercase</button>\r\n      <button disabled = {text.length === 0} className= \"btn btn-primary mx-1 my-1\" onClick={handleOnClear}>Clear</button>\r\n      <button disabled = {text.length === 0} className= \"btn btn-primary mx-1 my-1\" onClick={copyText}>Copy</button>\r\n      <button disabled = {text.length === 0} className= \"btn btn-primary mx-1 my-1\" onClick={handleExtraSpaces}>Remove Extra Spaces</button>\r\n    </div>\r\n    <div className=\"container my-3\" style = {{color : props.mode === \"dark\" ? \"white\" : \"#062655\"}}>\r\n        <h2>Your text summary</h2>\r\n        <p>{text.split(/\\s + /).filter((element)=>{return element.length !== 0}).length} words, {text.length} characters</p>\r\n        <p>{0.008 * text.split(/\\s + /).filter((element)=>{return element.length !== 0}).length} minutes used</p>\r\n        <h2>Preview</h2>\r\n        <p>{text.length > 0 ? text : \"Nothing to preview!\"}</p>\r\n    </div>\r\n    </>\r\n  );\r\n}\r\n","import React from \"react\";\r\n\r\nexport default function Alert(props) {\r\n    const capitalize = (word)=>{\r\n        const lower = word.toLowerCase();\r\n        return lower.charAt(0).toUpperCase() + lower.slice(1);\r\n    }\r\n  return (\r\n    <div style = {{height : '50px'}}>\r\n      {props.alert && <div>\r\n       <div\r\n    className={`alert alert-${props.alert.type} alert-dismissible fade show`}\r\n        role=\"alert\"\r\n      >\r\n        <strong>{capitalize(props.alert.type)}</strong> : {props.alert.msg}\r\n      </div>\r\n    </div>}\r\n    </div>\r\n  );\r\n}\r\n","import React, { useState } from \"react\";\nimport \"./App.css\";\nimport Navbar from \"./components/Navbar\";\nimport TextForm from \"./components/TextForm\";\nimport Alert from \"./components/Alert\";\n/* import About from \"./components/About\";\nimport { BrowserRouter as Router, Routes, Route} from \"react-router-dom\"; */\n\nfunction App() {\n  const [mode, setMode] = useState(\"light\");\n  const [alert, setAlert] = useState(null);\n\n  const showAlert = (message, type) => {\n    setAlert({\n      msg: message,\n      type: type,\n    });\n    setTimeout(() => {\n      setAlert(null);\n    }, 1500);\n  };\n\n  /* const removeBodyClasses= ()=>{\n    document.body.classList.remove('bg-light')\n    document.body.classList.remove('bg-success')\n    document.body.classList.remove('bg-warning')\n    document.body.classList.remove('bg-danger')\n  } */\n\n  const toggleMode = (cls) => {\n    /* removeBodyClasses();\n    document.body.classList.add('bg-'+ cls) */\n    if (mode === \"light\") {\n      setMode(\"dark\");\n      document.body.style.backgroundColor = \"#062655\";\n      showAlert(\"Dark mode has been enabled\", \"success\");\n    } else {\n      setMode(\"light\");\n      document.body.style.backgroundColor = \"white\";\n      showAlert(\"Light mode has been enabled\", \"success\");\n    }\n  };\n  return (\n    <>\n      {/* <Router> */}\n        <Navbar title=\"TextUtils\" mode={mode} toggleMode={toggleMode} />\n        <Alert alert={alert} />\n        <div className=\"container my-3\">\n          {/* <Routes>\n            <Route exact path=\"/about\" element={<About mode = {mode}/>} />\n            <Route\n              exact\n              path=\"/\"\n              element={ */}\n                <TextForm\n                  heading=\"Try TextUtils - Word Counter, Character Counter, Remove extra spaces\"\n                  showAlert={showAlert} mode = {mode}\n                />\n              {/* }\n            />\n          </Routes> */}\n        </div>\n      {/* </Router> */}\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();"],"sourceRoot":""}